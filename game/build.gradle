sourceCompatibility = JavaVersion.VERSION_17
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.java.srcDirs = ["src/"]

project.ext.mainClassName = "de.undefinedhuman.projectcreate.game.Game"
project.ext.assetsDir = new File("../assets")

jar {
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    setIgnoreExitValue(true)
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    setIgnoreExitValue(true)
    debug = true
}

jar {
    archiveBaseName.set("game")

    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    dependsOn configurations.runtimeClasspath
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from files(project.assetsDir)

    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
    dependencies {
        exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
    }

    manifest {
        attributes 'Main-Class': project.mainClassName
    }

    doLast {
        file(archiveFile).setExecutable(true, false)
    }
}

task dist(dependsOn: [jar]) {}

publishing {
    publications {
        library(MavenPublication) {
            artifact(tasks["jar"])
        }
        mavenJava(MavenPublication) {
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        maven {
            url "https://gitlab.playprojectcreate.com/api/v4/projects/2/packages/maven"
            credentials(HttpHeaderCredentials) {
                name = 'Job-Token'
                value = System.getenv("CI_JOB_TOKEN")
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}